{"name":"OpenCV in Android Studio","tagline":"Lear how to use OpenCV as an Android Studio library and integrate to your project","body":"### Download the OpenCV4Android SDK\r\nGo to the [OpenCV download page](http://opencv.org/downloads.html) and click in the \"Open CV for Android\" link to download the SDK. The version of the SDK used for this tutorial was the 3.0.0. Please refer to the exact version when you are downloading it. After download, extract the zip file.\r\n\r\n### Import OpenCV into Android Studio\r\nStart Android Studio and go to *File -> New -> Import Module*, choose **<OPENCV_SDK_HOME>/sdk/java** folder in the unzipped opencv archive\r\n\r\n### Update build.gradle\r\nOpen the build.gradle file and update the following fields according to the build.gradle of your app module:\r\n* compileSdkVersion\r\n* buildToolsVersion\r\n* minSdkVersion\r\n* targetSdkVersion\r\n\r\n### Add module dependency\r\nIn the build.gradle of the app module, add the following line to the `dependencies` section and sync project with Gradle files:\r\n\r\n\r\n    dependencies {\r\n        // other dependencies\r\n        compile project(':opencv')\r\n    }\r\n\r\n\r\n### Copy OpenCV libs\r\nCreate the folder `jniLibs` inside **app/src/main** and copy the **<OPENCV_SDK_HOME>/sdk/native/libs** folder to it. The `libs`folder contains all compiled .so according to each platform architecture. If you exclude one of them, make sure that the emulator or device are compatible\r\n\r\n### Loading OpenCV engine\r\nFinally, load the OpenCV runtime in order to communicate with native code, via Java Native Interface (JNI). Basically, the OpenCV has two modes to init the engine: async or debug. The former, checks if the OpenCV Manager package is installed. If not, a dialog is shown with a message, as updating or need to install from the Google Play Store.\r\n    \r\n    boolean engineWasInitiated = OpenCVLoader.initAsync(OpenCVLoader.OPENCV_VERSION_3_0_0, this, new LoaderCallbackInterface(){\r\n            @Override\r\n            public void onManagerConnected(int status) {\r\n                if (status == LoaderCallbackInterface.SUCCESS){\r\n                    Log.d(\"OpenCVLoader\", \"OpenCV Manager was loaded successfully.\");\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onPackageInstall(int operation, InstallCallbackInterface callback) {\r\n                // the OpenCV Manager was installed\r\n            }\r\n        })\r\n    if(engineWasInitiated){\r\n        // call OpenCV4Android classes here\r\n    }\r\n\r\nThe debug mode does not require the OpenCV Manager app to be installed, but the libs have to be present \r\n\r\n    boolean engineWasInitiated = OpenCVLoader.initDebug();\r\n    if (engineWasInitiated){\r\n        // call OpenCV4Android classes here\r\n    }\r\n\r\n### Authors\r\n[Ramon Rabello](http://github.com/ramonrabello/)\r\n\r\n### Thanks\r\nI would like to thanks [Kiran](https://stackoverflow.com/users/1180117/kiran) to post [this answer](https://stackoverflow.com/a/27421494/4147370) on StackOverflow, which helped me a lot and motivated me to write this how-to guide. \r\n\r\nSpecial thanks to OpenCV Team to provide us a great and powerful Open Source Computer Vision Library!\r\n\r\n### Support or Contact\r\nIf you have some issues, doubts or improvement suggestions, please let me know and reach me at ramon.rabello{at}gmail.com or make a Pull Request.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}